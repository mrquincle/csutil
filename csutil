#!/usr/bin/env python3

import time
import argparse
import json
import asyncio

from crownstone_ble import CrownstoneBle
from crownstone_core.Exceptions import CrownstoneException, CrownstoneBleException
from crownstone_core.Enums import CrownstoneOperationMode

parser = argparse.ArgumentParser(description='Search for any Crownstone and print their information')
parser.add_argument('--hciIndex', dest='hciIndex', metavar='I', type=int, nargs='?', default=0,
        help='The hci-index of the BLE chip')
parser.add_argument('keyFile',
        help='The json file with key information, expected values: admin, member, guest, basic,' +
        'serviceDataKey, localizationKey, meshApplicationKey, and meshNetworkKey')
parser.add_argument('action', type=str,
        help='The action to perform, options: setup')
parser.add_argument('macAddress', type=str,
        help='The bluetooth MAC address of the Crownstone to connect to.')
parser.add_argument('configFile',
        help='The json file with additional arguments (depends on the action)')

args = parser.parse_args()

print("===========================================\n\ncsutil\n\n===========================================")

# Initialize the Bluetooth Core.
core = CrownstoneBle()
core.loadSettingsFromFile(args.keyFile)

address = args.macAddress.lower()

async def setup():

    try:
        print(f"Do some BLE scanning to check if that works on this system")
        visibleCrownstones = await core.getCrownstonesByScanning(scanDuration=3)
        for crownstone in visibleCrownstones:
            print("- " + crownstone['address'])
    except (CrownstoneException, CrownstoneBleException) as e:
        print(f"Some error: {e}")
        return

    print("Setup Crownstone at address:", address)

    try:
        print(f"Waiting for Crownstone to show up in setup mode...")
        await core.waitForMode(address, CrownstoneOperationMode.SETUP, scanDuration=10)
    except (CrownstoneException, CrownstoneBleException) as e:
        print(f"Did not see the Crownstone in setup mode: {e}")
        return

    with open(args.configFile) as f:
        config = json.load(f)

    try:
        await core.setupCrownstone(
            address,
            crownstoneId = config['crownstoneId'],
            sphereId = config['sphereId'],
            meshDeviceKey = config['meshDeviceKey'],
            ibeaconUUID = config['ibeaconUUID'],
            ibeaconMajor = config['ibeaconMajor'],
            ibeaconMinor = config['ibeaconMinor']
        )
    except CrownstoneBleException as e:
        print("Something went wrong with the notifications", e)


    try:
        print(f"Waiting for Crownstone to reboot and show up in normal mode...")
        await core.waitForMode(address, CrownstoneOperationMode.NORMAL, scanDuration=10)
        print(f"Success!")
    except (CrownstoneException, CrownstoneBleException) as e:
        print(f"Did not see the Crownstone in normal mode, setup up probably failed: {e}")

async def factory_reset():

    # Crownstone should not already be in setup mode
    try:
        print(f"Search for Crownstone to show up in normal mode...")
        await core.waitForMode(address, CrownstoneOperationMode.NORMAL, scanDuration=10)
        print(f"Success!")
    except (CrownstoneException, CrownstoneBleException) as e:
        print(f"Did not see the Crownstone in normal mode")
        return

    # reset the Crownstone back into setup mode
    print(f"Connecting...")
    await core.connect(address)

    print(f"Connected, perform factory reset.")
    await core.control.commandFactoryReset()
    print(f"Factory reset complete!")

    try:
        print(f"Waiting for Crownstone to reboot and show up in setup mode...")
        await core.waitForMode(address, CrownstoneOperationMode.SETUP, scanDuration=10)
    except (CrownstoneException, CrownstoneBleException) as e:
        print(f"Did not see the Crownstone back in setup mode: {e}")
        return

    print("Disconnect")
    core.control.disconnect()
    time.sleep(1)

if args.action == 'setup':
    asyncio.run(setup())

if args.action == 'factory_reset':
    asyncio.run(factory_reset())

# clean up all pending processes
print("Core shutdown")
asyncio.run(core.shutDown())

