#!/usr/bin/env python3

import time
import argparse
import json
import asyncio

from crownstone_ble import CrownstoneBle
from crownstone_core.Exceptions import CrownstoneBleException
from crownstone_core.Enums import CrownstoneOperationMode

parser = argparse.ArgumentParser(description='Search for any Crownstone and print their information')
parser.add_argument('--hciIndex', dest='hciIndex', metavar='I', type=int, nargs='?', default=0,
        help='The hci-index of the BLE chip')
parser.add_argument('keyFile',
        help='The json file with key information, expected values: admin, member, guest, basic,' +
        'serviceDataKey, localizationKey, meshApplicationKey, and meshNetworkKey')
parser.add_argument('action', type=str,
        help='The action to perform, options: setup')
parser.add_argument('macAddress', type=str,
        help='The bluetooth MAC address of the Crownstone to connect to.')
parser.add_argument('configFile',
        help='The json file with additional arguments (depends on the action)')

args = parser.parse_args()

print("===========================================\n\ncsutil\n\n===========================================")

# Initialize the Bluetooth Core.
core = CrownstoneBle()
core.loadSettingsFromFile(args.keyFile)

address = args.macAddress.lower()

async def setup():
    print("Setup Crownstone at address:", address)

    if not await core.getMode(address) == CrownstoneOperationMode.SETUP:
       print("Crownstone is not in setup mode")
       return

    with open(args.configFile) as f:
        config = json.load(f)

    try:
        await core.setupCrownstone(
            address,
            crownstoneId = config['crownstoneId'],
            sphereId = config['sphereId'],
            meshDeviceKey = config['meshDeviceKey'],
            ibeaconUUID = config['ibeaconUUID'],
            ibeaconMajor = config['ibeaconMajor'],
            ibeaconMinor = config['ibeaconMinor']
        )
    except CrownstoneBleException as e:
        print("Something went wrong with the notifications", e)

    # Wait for setup to finish and the crownstone to reboot in normal mode.
    if await core.waitForMode(address, CrownstoneOperationMode.NORMAL, scanDuration=10):
        await asyncio.sleep(1)
    else:
        print("Something went wrong? Crownstone didn't come in normal mode")

async def factory_reset():

    # Crownstone should not already be in setup mode
    if not await core.getMode(address) == CrownstoneOperationMode.NORMAL:
       print("Crownstone is not in normal mode")
       return

    # reset the Crownstone back into setup mode
    print("Make a connection")
    core.connect(address)

    print("Perform factory reset")
    core.control.commandFactoryReset()
    time.sleep(1)

    print("Disconnect")
    core.control.disconnect()
    time.sleep(1)

if args.action == 'setup':
    asyncio.run(setup())

if args.action == 'factory_reset':
    asyncio.run(factory_reset())

# clean up all pending processes
print("Core shutdown")
asyncio.run(core.shutDown())

