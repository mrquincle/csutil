#!/usr/bin/env python3

import time
import argparse
import json

from crownstone_ble import CrownstoneBle, ScanBackends

parser = argparse.ArgumentParser(description='Search for any Crownstone and print their information')
parser.add_argument('--hciIndex', dest='hciIndex', metavar='I', type=int, nargs='?', default=0,
        help='The hci-index of the BLE chip')
parser.add_argument('keyFile',
        help='The json file with key information, expected values: admin, member, guest, basic,' +
        'serviceDataKey, localizationKey, meshApplicationKey, and meshNetworkKey')
parser.add_argument('action', type=str,
        help='The action to perform, options: setup')
parser.add_argument('macAddress', type=str,
        help='The bluetooth MAC address of the Crownstone to connect to.')
parser.add_argument('configFile',
        help='The json file with additional arguments (depends on the action)')

args = parser.parse_args()

print("===========================================\n\ncsutil\n\n===========================================")

# Initialize the Bluetooth Core.
core = CrownstoneBle(hciIndex=args.hciIndex)
core.loadSettingsFromFile(args.keyFile)

address = args.macAddress

def setup():
    print("Setup Crownstone at address:", address)

    # Does not seem to work properly
    #if not core.isCrownstoneInSetupMode(address):
    #    print("Crownstone is not in setup mode")
    #    return

    with open(args.configFile) as f:
        config = json.load(f)

    core.setupCrownstone(
        address,
        crownstoneId = config['crownstoneId'],
        sphereId = config['sphereId'],
        meshDeviceKey = config['meshDeviceKey'],
        ibeaconUUID = config['ibeaconUUID'],
        ibeaconMajor = config['ibeaconMajor'],
        ibeaconMinor = config['ibeaconMinor']
    )

    # wait for setup to finish and the crownstone to reboot
    print("Sleeping until Crownstone is in Normal mode and ready.")
    time.sleep(10)

def factory_reset():

    # reset the Crownstone back into setup mode
    print("Make a connection")
    core.connect(address)

    print("Perform factory reset")
    core.control.commandFactoryReset()
    time.sleep(1)

    print("Disconnect")
    core.control.disconnect()
    time.sleep(1)

if args.action == 'setup':
    setup()

if args.action == 'factory_reset':
    factory_reset()

# clean up all pending processes
print("Core shutdown")
core.shutDown()

